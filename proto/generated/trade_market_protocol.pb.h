// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_market_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trade_5fmarket_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trade_5fmarket_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trade_5fmarket_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trade_5fmarket_5fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trade_5fmarket_5fprotocol_2eproto;
namespace Serialize {
class TradeOrder;
struct TradeOrderDefaultTypeInternal;
extern TradeOrderDefaultTypeInternal _TradeOrder_default_instance_;
class TradeResponse;
struct TradeResponseDefaultTypeInternal;
extern TradeResponseDefaultTypeInternal _TradeResponse_default_instance_;
}  // namespace Serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialize::TradeOrder* Arena::CreateMaybeMessage<::Serialize::TradeOrder>(Arena*);
template<> ::Serialize::TradeResponse* Arena::CreateMaybeMessage<::Serialize::TradeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialize {

enum TradeOrder_TradeType : int {
  TradeOrder_TradeType_BUY = 0,
  TradeOrder_TradeType_SELL = 1,
  TradeOrder_TradeType_TradeOrder_TradeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TradeOrder_TradeType_TradeOrder_TradeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TradeOrder_TradeType_IsValid(int value);
constexpr TradeOrder_TradeType TradeOrder_TradeType_TradeType_MIN = TradeOrder_TradeType_BUY;
constexpr TradeOrder_TradeType TradeOrder_TradeType_TradeType_MAX = TradeOrder_TradeType_SELL;
constexpr int TradeOrder_TradeType_TradeType_ARRAYSIZE = TradeOrder_TradeType_TradeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeOrder_TradeType_descriptor();
template<typename T>
inline const std::string& TradeOrder_TradeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradeOrder_TradeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradeOrder_TradeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradeOrder_TradeType_descriptor(), enum_t_value);
}
inline bool TradeOrder_TradeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TradeOrder_TradeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradeOrder_TradeType>(
    TradeOrder_TradeType_descriptor(), name, value);
}
enum TradeResponse_status : int {
  TradeResponse_status_SUCCESS = 0,
  TradeResponse_status_ERROR = 1,
  TradeResponse_status_TradeResponse_status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TradeResponse_status_TradeResponse_status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TradeResponse_status_IsValid(int value);
constexpr TradeResponse_status TradeResponse_status_status_MIN = TradeResponse_status_SUCCESS;
constexpr TradeResponse_status TradeResponse_status_status_MAX = TradeResponse_status_ERROR;
constexpr int TradeResponse_status_status_ARRAYSIZE = TradeResponse_status_status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeResponse_status_descriptor();
template<typename T>
inline const std::string& TradeResponse_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TradeResponse_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TradeResponse_status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TradeResponse_status_descriptor(), enum_t_value);
}
inline bool TradeResponse_status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TradeResponse_status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TradeResponse_status>(
    TradeResponse_status_descriptor(), name, value);
}
// ===================================================================

class TradeOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.TradeOrder) */ {
 public:
  inline TradeOrder() : TradeOrder(nullptr) {}
  ~TradeOrder() override;
  explicit PROTOBUF_CONSTEXPR TradeOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradeOrder(const TradeOrder& from);
  TradeOrder(TradeOrder&& from) noexcept
    : TradeOrder() {
    *this = ::std::move(from);
  }

  inline TradeOrder& operator=(const TradeOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeOrder& operator=(TradeOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeOrder* internal_default_instance() {
    return reinterpret_cast<const TradeOrder*>(
               &_TradeOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradeOrder& a, TradeOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradeOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradeOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TradeOrder& from) {
    TradeOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.TradeOrder";
  }
  protected:
  explicit TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TradeOrder_TradeType TradeType;
  static constexpr TradeType BUY =
    TradeOrder_TradeType_BUY;
  static constexpr TradeType SELL =
    TradeOrder_TradeType_SELL;
  static inline bool TradeType_IsValid(int value) {
    return TradeOrder_TradeType_IsValid(value);
  }
  static constexpr TradeType TradeType_MIN =
    TradeOrder_TradeType_TradeType_MIN;
  static constexpr TradeType TradeType_MAX =
    TradeOrder_TradeType_TradeType_MAX;
  static constexpr int TradeType_ARRAYSIZE =
    TradeOrder_TradeType_TradeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TradeType_descriptor() {
    return TradeOrder_TradeType_descriptor();
  }
  template<typename T>
  static inline const std::string& TradeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TradeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TradeType_Name.");
    return TradeOrder_TradeType_Name(enum_t_value);
  }
  static inline bool TradeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TradeType* value) {
    return TradeOrder_TradeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 4,
    kTypeFieldNumber = 1,
    kUsdCostFieldNumber = 2,
    kUsdAmountFieldNumber = 3,
  };
  // string username = 4;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .Serialize.TradeOrder.TradeType type = 1;
  void clear_type();
  ::Serialize::TradeOrder_TradeType type() const;
  void set_type(::Serialize::TradeOrder_TradeType value);
  private:
  ::Serialize::TradeOrder_TradeType _internal_type() const;
  void _internal_set_type(::Serialize::TradeOrder_TradeType value);
  public:

  // int32 usd_cost = 2;
  void clear_usd_cost();
  int32_t usd_cost() const;
  void set_usd_cost(int32_t value);
  private:
  int32_t _internal_usd_cost() const;
  void _internal_set_usd_cost(int32_t value);
  public:

  // int32 usd_amount = 3;
  void clear_usd_amount();
  int32_t usd_amount() const;
  void set_usd_amount(int32_t value);
  private:
  int32_t _internal_usd_amount() const;
  void _internal_set_usd_amount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.TradeOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    int type_;
    int32_t usd_cost_;
    int32_t usd_amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trade_5fmarket_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class TradeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.TradeResponse) */ {
 public:
  inline TradeResponse() : TradeResponse(nullptr) {}
  ~TradeResponse() override;
  explicit PROTOBUF_CONSTEXPR TradeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TradeResponse(const TradeResponse& from);
  TradeResponse(TradeResponse&& from) noexcept
    : TradeResponse() {
    *this = ::std::move(from);
  }

  inline TradeResponse& operator=(const TradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeResponse& operator=(TradeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeResponse* internal_default_instance() {
    return reinterpret_cast<const TradeResponse*>(
               &_TradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TradeResponse& a, TradeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TradeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TradeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TradeResponse& from) {
    TradeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.TradeResponse";
  }
  protected:
  explicit TradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TradeResponse_status status;
  static constexpr status SUCCESS =
    TradeResponse_status_SUCCESS;
  static constexpr status ERROR =
    TradeResponse_status_ERROR;
  static inline bool status_IsValid(int value) {
    return TradeResponse_status_IsValid(value);
  }
  static constexpr status status_MIN =
    TradeResponse_status_status_MIN;
  static constexpr status status_MAX =
    TradeResponse_status_status_MAX;
  static constexpr int status_ARRAYSIZE =
    TradeResponse_status_status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  status_descriptor() {
    return TradeResponse_status_descriptor();
  }
  template<typename T>
  static inline const std::string& status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function status_Name.");
    return TradeResponse_status_Name(enum_t_value);
  }
  static inline bool status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      status* value) {
    return TradeResponse_status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseMsgFieldNumber = 1,
    kMessageLengthFieldNumber = 2,
  };
  // .Serialize.TradeResponse.status response_msg = 1;
  void clear_response_msg();
  ::Serialize::TradeResponse_status response_msg() const;
  void set_response_msg(::Serialize::TradeResponse_status value);
  private:
  ::Serialize::TradeResponse_status _internal_response_msg() const;
  void _internal_set_response_msg(::Serialize::TradeResponse_status value);
  public:

  // int32 message_length = 2;
  void clear_message_length();
  int32_t message_length() const;
  void set_message_length(int32_t value);
  private:
  int32_t _internal_message_length() const;
  void _internal_set_message_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.TradeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int response_msg_;
    int32_t message_length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trade_5fmarket_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeOrder

// .Serialize.TradeOrder.TradeType type = 1;
inline void TradeOrder::clear_type() {
  _impl_.type_ = 0;
}
inline ::Serialize::TradeOrder_TradeType TradeOrder::_internal_type() const {
  return static_cast< ::Serialize::TradeOrder_TradeType >(_impl_.type_);
}
inline ::Serialize::TradeOrder_TradeType TradeOrder::type() const {
  // @@protoc_insertion_point(field_get:Serialize.TradeOrder.type)
  return _internal_type();
}
inline void TradeOrder::_internal_set_type(::Serialize::TradeOrder_TradeType value) {
  
  _impl_.type_ = value;
}
inline void TradeOrder::set_type(::Serialize::TradeOrder_TradeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Serialize.TradeOrder.type)
}

// int32 usd_cost = 2;
inline void TradeOrder::clear_usd_cost() {
  _impl_.usd_cost_ = 0;
}
inline int32_t TradeOrder::_internal_usd_cost() const {
  return _impl_.usd_cost_;
}
inline int32_t TradeOrder::usd_cost() const {
  // @@protoc_insertion_point(field_get:Serialize.TradeOrder.usd_cost)
  return _internal_usd_cost();
}
inline void TradeOrder::_internal_set_usd_cost(int32_t value) {
  
  _impl_.usd_cost_ = value;
}
inline void TradeOrder::set_usd_cost(int32_t value) {
  _internal_set_usd_cost(value);
  // @@protoc_insertion_point(field_set:Serialize.TradeOrder.usd_cost)
}

// int32 usd_amount = 3;
inline void TradeOrder::clear_usd_amount() {
  _impl_.usd_amount_ = 0;
}
inline int32_t TradeOrder::_internal_usd_amount() const {
  return _impl_.usd_amount_;
}
inline int32_t TradeOrder::usd_amount() const {
  // @@protoc_insertion_point(field_get:Serialize.TradeOrder.usd_amount)
  return _internal_usd_amount();
}
inline void TradeOrder::_internal_set_usd_amount(int32_t value) {
  
  _impl_.usd_amount_ = value;
}
inline void TradeOrder::set_usd_amount(int32_t value) {
  _internal_set_usd_amount(value);
  // @@protoc_insertion_point(field_set:Serialize.TradeOrder.usd_amount)
}

// string username = 4;
inline void TradeOrder::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& TradeOrder::username() const {
  // @@protoc_insertion_point(field_get:Serialize.TradeOrder.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TradeOrder::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Serialize.TradeOrder.username)
}
inline std::string* TradeOrder::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Serialize.TradeOrder.username)
  return _s;
}
inline const std::string& TradeOrder::_internal_username() const {
  return _impl_.username_.Get();
}
inline void TradeOrder::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* TradeOrder::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* TradeOrder::release_username() {
  // @@protoc_insertion_point(field_release:Serialize.TradeOrder.username)
  return _impl_.username_.Release();
}
inline void TradeOrder::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Serialize.TradeOrder.username)
}

// -------------------------------------------------------------------

// TradeResponse

// .Serialize.TradeResponse.status response_msg = 1;
inline void TradeResponse::clear_response_msg() {
  _impl_.response_msg_ = 0;
}
inline ::Serialize::TradeResponse_status TradeResponse::_internal_response_msg() const {
  return static_cast< ::Serialize::TradeResponse_status >(_impl_.response_msg_);
}
inline ::Serialize::TradeResponse_status TradeResponse::response_msg() const {
  // @@protoc_insertion_point(field_get:Serialize.TradeResponse.response_msg)
  return _internal_response_msg();
}
inline void TradeResponse::_internal_set_response_msg(::Serialize::TradeResponse_status value) {
  
  _impl_.response_msg_ = value;
}
inline void TradeResponse::set_response_msg(::Serialize::TradeResponse_status value) {
  _internal_set_response_msg(value);
  // @@protoc_insertion_point(field_set:Serialize.TradeResponse.response_msg)
}

// int32 message_length = 2;
inline void TradeResponse::clear_message_length() {
  _impl_.message_length_ = 0;
}
inline int32_t TradeResponse::_internal_message_length() const {
  return _impl_.message_length_;
}
inline int32_t TradeResponse::message_length() const {
  // @@protoc_insertion_point(field_get:Serialize.TradeResponse.message_length)
  return _internal_message_length();
}
inline void TradeResponse::_internal_set_message_length(int32_t value) {
  
  _impl_.message_length_ = value;
}
inline void TradeResponse::set_message_length(int32_t value) {
  _internal_set_message_length(value);
  // @@protoc_insertion_point(field_set:Serialize.TradeResponse.message_length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Serialize::TradeOrder_TradeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Serialize::TradeOrder_TradeType>() {
  return ::Serialize::TradeOrder_TradeType_descriptor();
}
template <> struct is_proto_enum< ::Serialize::TradeResponse_status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Serialize::TradeResponse_status>() {
  return ::Serialize::TradeResponse_status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trade_5fmarket_5fprotocol_2eproto
