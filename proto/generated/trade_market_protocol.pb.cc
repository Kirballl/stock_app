// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trade_market_protocol.proto

#include "trade_market_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Serialize {
PROTOBUF_CONSTEXPR TradeOrder::TradeOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.usd_cost_)*/0
  , /*decltype(_impl_.usd_amount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradeOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeOrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeOrderDefaultTypeInternal() {}
  union {
    TradeOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeOrderDefaultTypeInternal _TradeOrder_default_instance_;
PROTOBUF_CONSTEXPR TradeResponse::TradeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_msg_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeResponseDefaultTypeInternal() {}
  union {
    TradeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeResponseDefaultTypeInternal _TradeResponse_default_instance_;
}  // namespace Serialize
static ::_pb::Metadata file_level_metadata_trade_5fmarket_5fprotocol_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_trade_5fmarket_5fprotocol_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_trade_5fmarket_5fprotocol_2eproto = nullptr;

const uint32_t TableStruct_trade_5fmarket_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::TradeOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Serialize::TradeOrder, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Serialize::TradeOrder, _impl_.usd_cost_),
  PROTOBUF_FIELD_OFFSET(::Serialize::TradeOrder, _impl_.usd_amount_),
  PROTOBUF_FIELD_OFFSET(::Serialize::TradeOrder, _impl_.username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::TradeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Serialize::TradeResponse, _impl_.response_msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Serialize::TradeOrder)},
  { 10, -1, -1, sizeof(::Serialize::TradeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Serialize::_TradeOrder_default_instance_._instance,
  &::Serialize::_TradeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_trade_5fmarket_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033trade_market_protocol.proto\022\tSerialize"
  "\"\223\001\n\nTradeOrder\022-\n\004type\030\001 \001(\0162\037.Serializ"
  "e.TradeOrder.TradeType\022\020\n\010usd_cost\030\002 \001(\005"
  "\022\022\n\nusd_amount\030\003 \001(\005\022\020\n\010username\030\004 \001(\t\"\036"
  "\n\tTradeType\022\007\n\003BUY\020\000\022\010\n\004SELL\020\001\"h\n\rTradeR"
  "esponse\0225\n\014response_msg\030\001 \001(\0162\037.Serializ"
  "e.TradeResponse.status\" \n\006status\022\013\n\007SUCC"
  "ESS\020\000\022\t\n\005ERROR\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_trade_5fmarket_5fprotocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_trade_5fmarket_5fprotocol_2eproto = {
    false, false, 304, descriptor_table_protodef_trade_5fmarket_5fprotocol_2eproto,
    "trade_market_protocol.proto",
    &descriptor_table_trade_5fmarket_5fprotocol_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_trade_5fmarket_5fprotocol_2eproto::offsets,
    file_level_metadata_trade_5fmarket_5fprotocol_2eproto, file_level_enum_descriptors_trade_5fmarket_5fprotocol_2eproto,
    file_level_service_descriptors_trade_5fmarket_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_trade_5fmarket_5fprotocol_2eproto_getter() {
  return &descriptor_table_trade_5fmarket_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_trade_5fmarket_5fprotocol_2eproto(&descriptor_table_trade_5fmarket_5fprotocol_2eproto);
namespace Serialize {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeOrder_TradeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_5fmarket_5fprotocol_2eproto);
  return file_level_enum_descriptors_trade_5fmarket_5fprotocol_2eproto[0];
}
bool TradeOrder_TradeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TradeOrder_TradeType TradeOrder::BUY;
constexpr TradeOrder_TradeType TradeOrder::SELL;
constexpr TradeOrder_TradeType TradeOrder::TradeType_MIN;
constexpr TradeOrder_TradeType TradeOrder::TradeType_MAX;
constexpr int TradeOrder::TradeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TradeResponse_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trade_5fmarket_5fprotocol_2eproto);
  return file_level_enum_descriptors_trade_5fmarket_5fprotocol_2eproto[1];
}
bool TradeResponse_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TradeResponse_status TradeResponse::SUCCESS;
constexpr TradeResponse_status TradeResponse::ERROR;
constexpr TradeResponse_status TradeResponse::status_MIN;
constexpr TradeResponse_status TradeResponse::status_MAX;
constexpr int TradeResponse::status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TradeOrder::_Internal {
 public:
};

TradeOrder::TradeOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Serialize.TradeOrder)
}
TradeOrder::TradeOrder(const TradeOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradeOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.usd_cost_){}
    , decltype(_impl_.usd_amount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.usd_amount_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.usd_amount_));
  // @@protoc_insertion_point(copy_constructor:Serialize.TradeOrder)
}

inline void TradeOrder::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.usd_cost_){0}
    , decltype(_impl_.usd_amount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradeOrder::~TradeOrder() {
  // @@protoc_insertion_point(destructor:Serialize.TradeOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradeOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void TradeOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradeOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.TradeOrder)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.usd_amount_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.usd_amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Serialize.TradeOrder.TradeType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Serialize::TradeOrder_TradeType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 usd_cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.usd_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 usd_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.usd_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Serialize.TradeOrder.username"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradeOrder::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.TradeOrder)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Serialize.TradeOrder.TradeType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 usd_cost = 2;
  if (this->_internal_usd_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_usd_cost(), target);
  }

  // int32 usd_amount = 3;
  if (this->_internal_usd_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_usd_amount(), target);
  }

  // string username = 4;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialize.TradeOrder.username");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.TradeOrder)
  return target;
}

size_t TradeOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.TradeOrder)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 4;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .Serialize.TradeOrder.TradeType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 usd_cost = 2;
  if (this->_internal_usd_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usd_cost());
  }

  // int32 usd_amount = 3;
  if (this->_internal_usd_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_usd_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradeOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradeOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradeOrder::GetClassData() const { return &_class_data_; }


void TradeOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradeOrder*>(&to_msg);
  auto& from = static_cast<const TradeOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Serialize.TradeOrder)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_usd_cost() != 0) {
    _this->_internal_set_usd_cost(from._internal_usd_cost());
  }
  if (from._internal_usd_amount() != 0) {
    _this->_internal_set_usd_amount(from._internal_usd_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradeOrder::CopyFrom(const TradeOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.TradeOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeOrder::IsInitialized() const {
  return true;
}

void TradeOrder::InternalSwap(TradeOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradeOrder, _impl_.usd_amount_)
      + sizeof(TradeOrder::_impl_.usd_amount_)
      - PROTOBUF_FIELD_OFFSET(TradeOrder, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trade_5fmarket_5fprotocol_2eproto_getter, &descriptor_table_trade_5fmarket_5fprotocol_2eproto_once,
      file_level_metadata_trade_5fmarket_5fprotocol_2eproto[0]);
}

// ===================================================================

class TradeResponse::_Internal {
 public:
};

TradeResponse::TradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Serialize.TradeResponse)
}
TradeResponse::TradeResponse(const TradeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_msg_ = from._impl_.response_msg_;
  // @@protoc_insertion_point(copy_constructor:Serialize.TradeResponse)
}

inline void TradeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_msg_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TradeResponse::~TradeResponse() {
  // @@protoc_insertion_point(destructor:Serialize.TradeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TradeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.TradeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_msg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Serialize.TradeResponse.status response_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response_msg(static_cast<::Serialize::TradeResponse_status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TradeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.TradeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Serialize.TradeResponse.status response_msg = 1;
  if (this->_internal_response_msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.TradeResponse)
  return target;
}

size_t TradeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.TradeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Serialize.TradeResponse.status response_msg = 1;
  if (this->_internal_response_msg() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradeResponse::GetClassData() const { return &_class_data_; }


void TradeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradeResponse*>(&to_msg);
  auto& from = static_cast<const TradeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Serialize.TradeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_response_msg() != 0) {
    _this->_internal_set_response_msg(from._internal_response_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradeResponse::CopyFrom(const TradeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.TradeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeResponse::IsInitialized() const {
  return true;
}

void TradeResponse::InternalSwap(TradeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_msg_, other->_impl_.response_msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trade_5fmarket_5fprotocol_2eproto_getter, &descriptor_table_trade_5fmarket_5fprotocol_2eproto_once,
      file_level_metadata_trade_5fmarket_5fprotocol_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Serialize::TradeOrder*
Arena::CreateMaybeMessage< ::Serialize::TradeOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::TradeOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::TradeResponse*
Arena::CreateMaybeMessage< ::Serialize::TradeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::TradeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
